{{- $travisCI := . }}
# Auto-generated by fogg. Do not edit
# Make improvements in fogg, so that everyone can benefit.
dist: bionic
language: python
sudo: required
python: 3.6
env:
  global:
    - BUILD_START=$(date +%s)
    - BUILDEVENTS_BUILD_ID=${TRAVIS_BUILD_ID}
    {{- if .Buildevents }}
    - CHECK_PLANFILE_PATH=check-plan.output
    - BUILDEVENT_FILE=buildevents.plan
    {{- end }}

install:
  {{- if .Buildevents }}
  - STEP_START=$(date +%s)
  - STEP_NAME=install.${TRAVIS_JOB_NUMBER}
  - STEP_SPAN_ID=$(echo ${STEP_NAME} | sum | cut -f 1 -d \ )
  {{- end }}
  - pip install awscli --upgrade
  - aws --version
  - FOGG_VERSION="v{{ .FoggVersion }}" travis_retry make setup
  {{- if .Buildevents }}
  - mkdir bin # this is in theory supposed to exist already
  - curl -L -o $HOME/bin/buildevents https://github.com/honeycombio/buildevents/releases/latest/download/buildevents-linux-amd64
  - chmod 755 $HOME/bin/buildevents
  - buildevents --version
  - buildevents step $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID $STEP_START $STEP_NAME
  {{- end }}
before_script:
  {{- if .Buildevents }}
  - STEP_START=$(date +%s)
  - STEP_NAME=before_script.${TRAVIS_JOB_NUMBER}
  - STEP_SPAN_ID=$(echo ${STEP_NAME} | sum | cut -f 1 -d \ )
  {{- end }}
  - aws configure set aws_access_key_id     $IDACCT_AWS_ACCESS_KEY_ID     --profile _idacct
  - aws configure set aws_secret_access_key $IDACCT_AWS_SECRET_ACCESS_KEY --profile _idacct
  - aws --profile _idacct sts get-caller-identity

{{ range $profileName, $profile:= .AWSProfiles}}
  - aws configure set profile.{{ $profileName }}.role_arn arn:aws:iam::{{ $profile.AccountID }}:role/{{ $profile.RoleName}}
  - aws configure set profile.{{ $profileName }}.source_profile _idacct
  - {{- if $travisCI.Buildevents }} buildevents cmd $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID sts-caller-identity.{{ $profileName }} -- {{- end }} aws --profile {{ $profileName }} sts get-caller-identity
{{ end }}
{{- if .Buildevents }}
  - buildevents step $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID $STEP_START $STEP_NAME
{{- end }}

jobs:
  include:
    - stage: fogg-apply clean
      script:
        - |
          set -e
          {{- if .Buildevents }}
          STEP_START=$(date +%s)
          STEP_NAME=fogg-apply-clean.${TRAVIS_JOB_NUMBER}
          STEP_SPAN_ID=$(echo ${STEP_NAME} | sum | cut -f 1 -d \ )
          {{- end }}
          .fogg/bin/fogg apply
          if [ "$(git status --porcelain)" != "" ]; then
            echo "git tree is dirty after running fogg apply"
            echo "ensure you run fogg apply on your branch"
            git status
            exit 1
          fi
          {{- if .Buildevents }}
          buildevents step $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID $STEP_START $STEP_NAME
          {{- end }}
{{- range $testBucket := .TestBuckets }}
    - stage: check
      script:
        - set -e
      {{- if $travisCI.Buildevents }}
        - STEP_START=$(date +%s)
        - STEP_NAME=check.${TRAVIS_JOB_NUMBER}
        - STEP_SPAN_ID=$(echo ${STEP_NAME} | sum | cut -f 1 -d \ )
      {{- end }}
      {{- range $component := $testBucket }}
        - pushd {{ $component.Dir }}
        - travis_retry {{ if $travisCI.Buildevents }} buildevents cmd $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID {{ $component.Dir }} -- {{- end }} make {{ $component.Command }}
        - popd
      {{- end }}
      {{- if $travisCI.Buildevents }}
        - buildevents step $BUILDEVENTS_BUILD_ID $STEP_SPAN_ID $STEP_START $STEP_NAME
      {{- end }}
{{- end }}
{{- if .Buildevents }}
after_failure:
  - echo "$(buildevents build $BUILDEVENTS_BUILD_ID $BUILD_START failure)"
after_success:
  - echo "$(buildevents build $BUILDEVENTS_BUILD_ID $BUILD_START success)"
{{- end }}
